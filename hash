# Warning:
# There is a 63 character limit to the input at the moment...

INPUT_LENGTH=${#1};
INPUT="";
VERBOSE=false;

if [ "$2" == "-v" ]; then
	VERBOSE=true;
fi

echo "";
echo "$(printf "\033[1;31m Original : \033[0m ")$1";
echo "";

# Converting string to binary
for i in $(seq 0 1 $(($INPUT_LENGTH-1)))
do
	ASCII=$(printf "%d" "'${1:i:1}")
	BINARY=$(echo "obase=2;$ASCII" | bc)
	if [ ${#BINARY} -lt 8 ]; then
		for a in $(seq ${#BINARY} 1 7)
		do
			BINARY=0$BINARY;
		done
	fi
	INPUT+=$BINARY;
done
INPUT_LENGTH=${#INPUT}
INPUT+=1;

if [ $VERBOSE == true ]; then
	echo "";
	echo "$(printf "\033[1;31m BINARY : \033[0m ")$INPUT";
	echo "";
fi

# Add 0's until the remainder of the length divided by 512 is 448 (512 - 64)
FINISHED=false;
while [ $FINISHED == false ]
do
	if [ $((${#INPUT} % 512)) == 448 ]; then
		FINISHED=true;
	else
		INPUT+=0;
	fi
done


# Add length of original message padded to 64 bits
PADDING="";
INPUT_LENGTH=$(echo "obase=2;$INPUT_LENGTH" | bc);
for i in $(seq ${#INPUT_LENGTH} 1 63)
do
	PADDING+=0;
done
PADDING+=$INPUT_LENGTH;
INPUT+=$PADDING;

if [ $VERBOSE == true ]; then
	echo "$(printf "\033[1;33m Added 0's : \033[0m ")$INPUT";
	echo "";
fi

# Input is now a 512 bit chunk


# Break chunk into 'words' (16 32 bit pieces)
WORDS=();
if [ $VERBOSE == true ]; then
	printf "\033[1;36m 32-bit 'Words' : \033[0m "
fi
echo "";
for i in {0..15}
do
	WORDS+=(${INPUT:$((32*i)):32});
	if [ $VERBOSE == true ]; then
		echo ${WORDS[i]};
	fi
done


# Extension Process (80 words)

NEW=""

# if both bits are the same, output 0
function logic_xor {
	FIRST=$1;
	SECOND=$2;
	NEW=""
	for i in $(seq 0 1 $((${#FIRST}-1)))
	do
		if [ $(( (${FIRST:i:1} + ${SECOND:i:1}) % 2)) == 0 ]; then
			NEW+="0"
		else
			NEW+="1"
		fi
	done
}

# Define word selectors
SEL_ONE=13
SEL_TWO=8
SEL_THREE=2
SEL_FOUR=0

if [ $VERBOSE == true ]; then
	echo "";
	printf "\033[1;35m New XOR'd 'Words' : \033[0m "
	echo "";
fi

# create the additional words
for b in $(seq 15 1 78)
do
	logic_xor ${WORDS[$SEL_ONE]} ${WORDS[$SEL_TWO]};
	logic_xor $NEW ${WORDS[$SEL_THREE]};
	logic_xor $NEW ${WORDS[$SEL_FOUR]};
	FIRST_CHAR=${NEW:0:1}
	NEW=${NEW:1:32}
	NEW=$NEW$FIRST_CHAR
	if [ $VERBOSE == true ]; then
		echo $NEW
	fi
	WORDS+=($NEW);

	SEL_ONE=$((SEL_ONE+1));
	SEL_TWO=$((SEL_TWO+1));
	SEL_THREE=$((SEL_THREE+1));
	SEL_FOUR=$((SEL_FOUR+1));
done


# Degine logical functions

# if both bits are 1 output 1
function logic_and {
	FIRST=$1;
	SECOND=$2;
	NEW=""
	for i in $(seq 0 1 $((${#FIRST}-1)));
	do
		if [ $((${FIRST:i:1} + ${SECOND:i:1})) == 2 ]; then
			NEW+="1";
		else
			NEW+="0";
		fi
	done
}

# output opposite bit
function logic_not {
	NEW=''
	for i in $(seq 0 1 $((${#1}-1)));
	do
		NEW+=$((1-${1:i:1}));
	done
}

# if both bits aren't 0 output 1
function logic_or {
	FIRST=$1;
	SECOND=$2;
	NEW=""
	for i in $(seq 0 1 $((${#FIRST}-1)));
	do
		if [ $((${FIRST:i:1} + ${SECOND:i:1})) -gt 0 ]; then
			NEW+="1";
		else
			NEW+="0";
		fi
	done
}

# rotate bits (circular)
function lrot {

	# $1 = binary ; $2 = shift value
	LENGTH=${#1}
	DIFFERENCE=$(($LENGTH-$2))
	SWAPPED=${1:0:$2}
	NEW=${1:$2:$DIFFERENCE}
	NEW=$NEW$SWAPPED


}

# add 2 binary values
function addBin {
	SUM=$(echo "obase=2;$((2#$1 + 2#$2))" | bc)
}

# Define All-Mighty K Variable
K="";



# Create Compression functions
function comp_one {

	# B = $1 ; C = $2 ; D = $3

	# B and C
	# !B and D
	# (B and C) or (!B and D)

	# Define response variables
	B_AND_C="";
	NOT_B_AND_D="";

	logic_and $1 $2;
	B_AND_C=$NEW;
	logic_not $1;
	logic_and $NEW $3;
	NOT_B_AND_D=$NEW;
	logic_or $B_AND_C $NOT_B_AND_D;

	K="01011010100000100111100110011001";

}

function comp_two {

	# B = $1 ; C = $2 ; D = $3

	# B xor C
	# (B xor C) xor D

	logic_xor $1 $2;
	logic_xor $NEW $3;

	K="01101110110110011110101110100001";

}

function comp_three {
	# B = $1 ; C = $2 ; D = $3

	# B and C
	# B and D
	# C and D
	# (B and C) or (B and D)
	# ((B and C) or (B and D)) or C and D

	# Define response variables
	B_AND_C="";
	B_AND_D="";
	C_AND_D="";
	B_OR="";

	logic_and $1 $2;
	B_AND_C=$NEW;
	logic_and $1 $3;
	B_AND_D=$NEW;
	logic_and $2 $3;
	C_AND_D=$NEW;
	logic_or $B_AND_C $B_AND_D;
	B_OR=$NEW;
	logic_or $B_OR $C_AND_D;

	K="10001111000110111011110011011100";

}

function comp_four {

	# B = $1 ; C = $2 ; D = $3

	# Same as comp 2 but with different K value

	logic_xor $1 $2;
	logic_xor $NEW $3;

	K="11001010011000101100000111010110";

}


# define starting values for variables (seeded set of 32-bits)
h0="01100111010001010010001100000001"
h1="11101111110011011010101110001001"
h2="10011000101110101101110011111110"
h3="00010000001100100101010001110110"
h4="11000011110100101110000111110000"

# define shifting variables
A=$h0
B=$h1
C=$h2
D=$h3
E=$h4

SUM="";

if [ $VERBOSE == true ]; then
	echo "";
	printf "\033[1;37mNew TEMPS : \033[0m "
	echo "";
fi

# create main loop
for z in {0..79}
do
	# 0-19:comp_one | 19-39:comp_two | 39-59:comp_three | 59-79:comp_four
	if [ $z -lt 19 ]; then
		comp_one $B $C $D;
	elif [ $z -lt 39 ] && [ $z -gt 19 ]; then
		comp_two $B $C $D;
	elif [ $z -lt 59 ] && [ $z -gt 39 ]; then
		comp_three $B $C $D;
	elif [ $z -lt 79 ] && [ $z -gt 59 ]; then
		comp_four $B $C $D;
	fi
	F=$NEW;
	CURRENT_WORD=${WORDS[$z]};

	# A (lrot 5) + F + E + K + CURRENT_WORD
	lrot $A 5
	addBin $NEW $F;
	addBin $SUM $E;
	addBin $SUM $K;
	addBin $SUM $CURRENT_WORD;

	# Trunculate to 32 bits
	SUM=${SUM:0:32};
	if [ $VERBOSE == true ]; then
		echo "TEMP : $SUM | $z";
	fi

	# shift variables
	E=$D;
	D=$C;
	lrot $B 30
	C=$NEW;
	B=$A;
	A=$SUM;
done


# Modify h Variables
if [ $VERBOSE == true ]; then
	echo "";
	printf "\033[1;31mNew H Variables : \033[0m "
	echo "";
fi

# h0=h0+A
# h1=h1+b
# h2=h2+C
# h3=h3+D
# h4=h4+E
# trunculate back to 32 bits


addBin $h0 $A;
SUM=${SUM:0:32};
h0=$SUM

addBin $h1 $B;
SUM=${SUM:0:32};
h1=$SUM

addBin $h2 $C;
SUM=${SUM:0:32};
h2=$SUM

addBin $h3 $D;
SUM=${SUM:0:32};
h3=$SUM

addBin $h4 $E;
SUM=${SUM:0:32};
h4=$SUM

if [ $VERBOSE == true ]; then
	echo "h0 : $h0";
	echo "h1 : $h1";
	echo "h2 : $h2";
	echo "h3 : $h3";
	echo "h4 : $h4";
fi

# Convert to Hexadecimal
h0=$(echo "obase=16;ibase=2;$h0" | bc);
h1=$(echo "obase=16;ibase=2;$h1" | bc);
h2=$(echo "obase=16;ibase=2;$h2" | bc);
h3=$(echo "obase=16;ibase=2;$h3" | bc);
h4=$(echo "obase=16;ibase=2;$h4" | bc);


# Concatenate Hexes
if [ $VERBOSE == true ]; then
	echo "";
	printf "\033[1;36m HASH : \033[1;37m$h0$h1$h2$h3$h4 \033[0m";
	echo "";
else
	echo "$h0$h1$h2$h3$h4";
fi
echo "";


# password12345 : A3A8AFD1D442F9C7A1A3A283FD09791895D1E31A
